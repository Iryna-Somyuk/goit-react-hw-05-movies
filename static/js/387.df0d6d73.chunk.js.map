{"version":3,"file":"static/js/387.df0d6d73.chunk.js","mappings":"qVAEaA,EAAW,gCACXC,EAAU,mCACVC,EAAe,kCAEfC,EAAiB,mCAAG,6GAEVC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,uBAA4C,CAC7DK,OAAQ,CACNC,QAASL,EACTM,KAAM,KALmB,UAEvBC,EAFuB,6BAUrB,IAAIC,MAViB,gCAYtBD,EAAKE,KAAKC,SAZY,gCAc7BC,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAfiB,yDAAH,qDAmBjBC,EAAoB,mCAAG,WAAMC,GAAN,gGAEbZ,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAAsC,CACvDK,OAAQ,CACNC,QAASL,EACTgB,SAAU,QACVD,MAAM,GAAD,OAAKA,GACVT,KAAM,EACNW,eAAe,KARa,UAE1BV,EAF0B,6BAaxB,IAAIC,MAboB,gCAgBzBD,EAAKE,KAAKC,SAhBe,gCAkBhCC,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAnBoB,yDAAH,sDAuBpBK,EAAgB,mCAAG,WAAMC,GAAN,gGAEThB,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+BoB,EAA/B,KAA2C,CAC5Df,OAAQ,CACNC,QAASL,EACTgB,SAAU,WALc,UAEtBT,EAFsB,OAQ5BI,QAAQS,IAAIb,EAAKE,MACZF,EATuB,sBAUpB,IAAIC,MAVgB,gCAYrBD,EAAKE,MAZgB,kCAc5BE,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAfgB,0DAAH,sDAmBhBQ,EAAa,mCAAG,WAAMF,GAAN,gGAENhB,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+BoB,EAA/B,aAAmD,CACpEf,OAAQ,CACNC,QAASL,EACTgB,SAAU,WALW,UAEnBT,EAFmB,6BAUjB,IAAIC,MAVa,gCAYlBD,EAAKE,KAAKa,MAZQ,gCAczBX,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAfa,yDAAH,sDAmBbU,EAAgB,mCAAG,WAAMJ,GAAN,gGAEThB,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+BoB,EAA/B,aAAmD,CACpEf,OAAQ,CACNY,SAAU,QACVX,QAASL,KALe,UAEtBO,EAFsB,6BAUpB,IAAIC,MAVgB,gCAYrBD,EAAKE,KAAKC,SAZW,gCAc5BC,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAfgB,yDAAH,qD,yICpFhBW,EAAmBC,EAAAA,EAAAA,GAAH,yCAGhBC,EAAiBD,EAAAA,EAAAA,KAAH,8DAIdE,EAAgBF,EAAAA,EAAAA,EAAH,uJ,SC4B1B,EA5BgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAMR,OAJAa,EAAAA,EAAAA,YAAU,YACRT,EAAAA,EAAAA,IAAiBJ,GAASc,KAAKH,EAChC,GAAE,CAACX,KAGF,8BACIU,EAAQK,QAKR,SAACV,EAAD,UACGK,EAAQM,KAAI,SAAAC,GAAC,OACZ,2BACE,UAACT,EAAD,sBAAwBS,EAAEC,WAC1B,uBAAID,EAAEE,YAFCF,EAAEG,GADC,OALhB,SAACb,EAAD,2DAeP,C","sources":["apiService.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport toast from 'react-hot-toast';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'e146a7a5146c0f8a3c3cd99167c5b659';\nexport const BASE_URL_IMG = 'https://image.tmdb.org/t/p/w300';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const resp = await axios.get(`${BASE_URL}trending/movie/day?`, {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    });\n\n    if (!resp) {\n      throw new Error();\n    }\n    return resp.data.results;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n\nexport const getMoviesSearchQuery = async query => {\n  try {\n    const resp = await axios.get(`${BASE_URL}search/movie?`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-uk',\n        query: `${query}`,\n        page: 1,\n        include_adult: false,\n      },\n    });\n\n    if (!resp) {\n      throw new Error();\n    }\n\n    return resp.data.results;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n\nexport const getMoviesDetails = async movieId => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}?`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    console.log(resp.data);\n    if (!resp) {\n      throw new Error();\n    }\n    return resp.data;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n\nexport const getMoviesCast = async movieId => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}/credits?`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n\n    if (!resp) {\n      throw new Error();\n    }\n    return resp.data.cast;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n\nexport const getMoviesReviews = async movieId => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}/reviews?`, {\n      params: {\n        language: 'en-US',\n        api_key: API_KEY,\n      },\n    });\n\n    if (!resp) {\n      throw new Error();\n    }\n    return resp.data.results;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const ContainerReviews = styled.ul`\n  padding: 8px;\n`;\nexport const ReviewsMessage = styled.span`\n  padding: 20px;\n  font-size: 30px;\n`;\nexport const ReviewsAuthor = styled.p`\n  padding: 4px;\n  font-size: 20px;\n  font-weight: 700;\n  text-transform: uppercase;\n  color: black;\n  margin: 10px auto;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMoviesReviews } from 'apiService';\nimport {\n  ContainerReviews,\n  ReviewsMessage,\n  ReviewsAuthor,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMoviesReviews(movieId).then(setReviews);\n  }, [movieId]);\n\n  return (\n    <>\n      {!reviews.length ? (\n        <ReviewsMessage>\n          Sorry, there are no reviews for this movie.\n        </ReviewsMessage>\n      ) : (\n        <ContainerReviews>\n          {reviews.map(a => (\n            <li key={a.id}>\n              <ReviewsAuthor>Author: {a.author}</ReviewsAuthor>\n              <p>{a.content}</p>\n            </li>\n          ))}\n        </ContainerReviews>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","API_KEY","BASE_URL_IMG","getTrendingMovies","axios","params","api_key","page","resp","Error","data","results","console","error","toast","getMoviesSearchQuery","query","language","include_adult","getMoviesDetails","movieId","log","getMoviesCast","cast","getMoviesReviews","ContainerReviews","styled","ReviewsMessage","ReviewsAuthor","useState","reviews","setReviews","useParams","useEffect","then","length","map","a","author","content","id"],"sourceRoot":""}