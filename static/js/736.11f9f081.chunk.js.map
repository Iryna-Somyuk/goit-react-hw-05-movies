{"version":3,"file":"static/js/736.11f9f081.chunk.js","mappings":"qVAEaA,EAAW,gCACXC,EAAU,mCACVC,EAAe,kCAEfC,EAAiB,mCAAG,6GAEVC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,uBAA4C,CAC7DK,OAAQ,CACNC,QAASL,EACTM,KAAM,KALmB,UAEvBC,EAFuB,6BAUrB,IAAIC,MAViB,gCAYtBD,EAAKE,KAAKC,SAZY,gCAc7BC,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAfiB,yDAAH,qDAmBjBC,EAAoB,mCAAG,WAAMC,GAAN,gGAEbZ,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAAsC,CACvDK,OAAQ,CACNC,QAASL,EACTgB,SAAU,QACVD,MAAM,GAAD,OAAKA,GACVT,KAAM,EACNW,eAAe,KARa,UAE1BV,EAF0B,6BAaxB,IAAIC,MAboB,gCAgBzBD,EAAKE,KAAKC,SAhBe,gCAkBhCC,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAnBoB,yDAAH,sDAuBpBK,EAAgB,mCAAG,WAAMC,GAAN,gGAEThB,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+BoB,EAA/B,KAA2C,CAC5Df,OAAQ,CACNC,QAASL,EACTgB,SAAU,WALc,UAEtBT,EAFsB,OAQ5BI,QAAQS,IAAIb,EAAKE,MACZF,EATuB,sBAUpB,IAAIC,MAVgB,gCAYrBD,EAAKE,MAZgB,kCAc5BE,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAfgB,0DAAH,sDAmBhBQ,EAAa,mCAAG,WAAMF,GAAN,gGAENhB,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+BoB,EAA/B,aAAmD,CACpEf,OAAQ,CACNC,QAASL,EACTgB,SAAU,WALW,UAEnBT,EAFmB,6BAUjB,IAAIC,MAVa,gCAYlBD,EAAKE,KAAKa,MAZQ,gCAczBX,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAfa,yDAAH,sDAmBbU,EAAgB,mCAAG,WAAMJ,GAAN,gGAEThB,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAA+BoB,EAA/B,aAAmD,CACpEf,OAAQ,CACNY,SAAU,QACVX,QAASL,KALe,UAEtBO,EAFsB,6BAUpB,IAAIC,MAVgB,gCAYrBD,EAAKE,KAAKC,SAZW,gCAc5BC,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAY,2DAfgB,yDAAH,qD,2ICpFhBW,EAAYC,EAAAA,EAAAA,GAAH,8KASTC,EAAgBD,EAAAA,EAAAA,IAAH,kGAMbE,EAAkBF,EAAAA,EAAAA,IAAH,uHAQfG,EAAYH,EAAAA,EAAAA,EAAH,mG,SCOtB,EAtBa,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAKR,OAJAa,EAAAA,EAAAA,YAAU,YACRX,EAAAA,EAAAA,IAAcF,GAASc,KAAKH,EAC7B,GAAE,CAACX,KAGF,4BACE,SAACK,EAAD,oBACA,SAACE,EAAD,UACGJ,EAAKY,KAAI,SAAAC,GAAK,OACb,UAACR,EAAD,YACE,gBAAKS,IAAKnC,EAAAA,GAAekC,EAAME,aAAcC,IAAKH,EAAMI,QACxD,SAACX,EAAD,UAAYO,EAAMI,SAFEJ,EAAMK,GADf,QAStB,C","sources":["apiService.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport toast from 'react-hot-toast';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'e146a7a5146c0f8a3c3cd99167c5b659';\nexport const BASE_URL_IMG = 'https://image.tmdb.org/t/p/w300';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const resp = await axios.get(`${BASE_URL}trending/movie/day?`, {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    });\n\n    if (!resp) {\n      throw new Error();\n    }\n    return resp.data.results;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n\nexport const getMoviesSearchQuery = async query => {\n  try {\n    const resp = await axios.get(`${BASE_URL}search/movie?`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-uk',\n        query: `${query}`,\n        page: 1,\n        include_adult: false,\n      },\n    });\n\n    if (!resp) {\n      throw new Error();\n    }\n\n    return resp.data.results;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n\nexport const getMoviesDetails = async movieId => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}?`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    console.log(resp.data);\n    if (!resp) {\n      throw new Error();\n    }\n    return resp.data;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n\nexport const getMoviesCast = async movieId => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}/credits?`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n\n    if (!resp) {\n      throw new Error();\n    }\n    return resp.data.cast;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n\nexport const getMoviesReviews = async movieId => {\n  try {\n    const resp = await axios.get(`${BASE_URL}/movie/${movieId}/reviews?`, {\n      params: {\n        language: 'en-US',\n        api_key: API_KEY,\n      },\n    });\n\n    if (!resp) {\n      throw new Error();\n    }\n    return resp.data.results;\n  } catch (error) {\n    console.error(error);\n    toast.error(\"We're sorry, something's wrong. Please try again later!\");\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const CastTitle = styled.h2`\n  padding: 4px;\n  font-size: 40px;\n  font-weight: 700;\n  text-transform: uppercase;\n  color: black;\n  margin: 20px auto;\n  text-align: center;\n`;\nexport const ContainerCast = styled.div`\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  gap: 16px;\n`;\n\nexport const CardWrapperCast = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\nexport const ActorName = styled.p`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMoviesCast, BASE_URL_IMG } from 'apiService';\nimport {\n  ContainerCast,\n  CardWrapperCast,\n  ActorName,\n  CastTitle,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    getMoviesCast(movieId).then(setCast);\n  }, [movieId]);\n\n  return (\n    <div>\n      <CastTitle>Cast</CastTitle>\n      <ContainerCast>\n        {cast.map(actor => (\n          <CardWrapperCast key={actor.id}>\n            <img src={BASE_URL_IMG + actor.profile_path} alt={actor.name} />\n            <ActorName>{actor.name}</ActorName>\n          </CardWrapperCast>\n        ))}\n      </ContainerCast>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","BASE_URL_IMG","getTrendingMovies","axios","params","api_key","page","resp","Error","data","results","console","error","toast","getMoviesSearchQuery","query","language","include_adult","getMoviesDetails","movieId","log","getMoviesCast","cast","getMoviesReviews","CastTitle","styled","ContainerCast","CardWrapperCast","ActorName","useState","setCast","useParams","useEffect","then","map","actor","src","profile_path","alt","name","id"],"sourceRoot":""}